#!/usr/bin/env node

'use strict';

var read = require('read');
var program = require('commander');
var Promise = require('bluebird');

var Askfm = require('../lib/askfm');

var colors = {
  red: '\u001b[31m',
  green: '\u001b[32m',
  white: '\u001b[37m',
  end: '\u001b[0m'
};

var keywords = /質問ではない。?|不?自由/g;

program
.version('0.0.1')
.option('-u, --user [username]', 'Specify who to ask. default: EzoeRyou', 'EzoeRyou')
.usage('[options] [question]')
.parse(process.argv);

var ask = new Askfm(program.user);
Promise.resolve()
.then(function() {
  if (program.args.length === 0) {
    return ask.getLog()
      .then(function(logs) {
        logs.forEach(function(log) {
          console.log(log.link);
          console.log(colors.red + log.title + colors.end);
          console.log(log.desc.replace(keywords, colors.green + '$&' + colors.end));
          console.log();
        });
      });
  } else {
    return getUserInfo()
    .then(function(user) {
      var question = extractArgs(program.args);
      return ask.postQuestion(user, question)
      .then(function() {
        console.log(program.user + ' に ' + question + 'と質問しました');
      });
    })
  }
})
.catch(function(err) {
  console.error(err.message);
});

function getUserInfo() {
  if (process.env.ASKFM_USER && process.env.ASKFM_PASSWORD) {
    return Promise.resolve({login: process.env.ASKFM_USER, password: process.env.ASKFM_PASSWORD});
  }
  return new Promise(function(resolve, reject) {
    read({prompt: 'User: '}, function(err, user) {
      if (err || !user) {
        return reject(new Error('ユーザー名を入力してください'));
      }
      read({prompt: 'Password: ', silent: true}, function(err, password) {
        if (err || !password) {
          return reject(new Error('パスワードを入力してください'));
        }
        resolve({login: user, password: password});
      });
    });
  });
}

function extractArgs(args) {
  return args.reduce(function(previous, current) {
    return previous + ' ' + current;
  });
}
